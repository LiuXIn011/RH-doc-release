import{_ as e,a,b as t,c as o}from"./chunks/oss4.203a68f8.js";import{_ as s,o as r,c as i,V as l}from"./chunks/framework.d32248c8.js";const n="/RH-doc-release/compose.png",c="/RH-doc-release/docker-compose-start.png",d="/RH-doc-release/docker-ps.png",x=JSON.parse('{"title":"Compose部署","description":"","frontmatter":{"title":"Compose部署"},"headers":[],"relativePath":"docker/dockerCompose/index.md"}'),p={name:"docker/dockerCompose/index.md"},h=l('<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>docker安装前需要完成项目配置，详情参阅<a href="/RH-doc-release/develop/options/">配置</a></p><h4 id="容器全部为host网络模式-需要用到的端口有-8088、9000、9001、7001、3306、6379" tabindex="-1">容器全部为host网络模式，需要用到的端口有：8088、9000、9001、7001、3306、6379 <a class="header-anchor" href="#容器全部为host网络模式-需要用到的端口有-8088、9000、9001、7001、3306、6379" aria-label="Permalink to &quot;容器全部为host网络模式，需要用到的端口有：8088、9000、9001、7001、3306、6379&quot;">​</a></h4><h2 id="yml及相关文件目录" tabindex="-1">YML及相关文件目录 <a class="header-anchor" href="#yml及相关文件目录" aria-label="Permalink to &quot;YML及相关文件目录&quot;">​</a></h2><p>docker相关文件在/docker目录下 <img src="'+n+`" alt="compose"></p><table><thead><tr><th>文件/文件夹</th><th>作用</th></tr></thead><tbody><tr><td>data</td><td>Mysql、Redis、Minio数据持久化文件夹，所有数据备份在此文件夹</td></tr><tr><td>init-sql</td><td>Mysql数据库初始化脚本</td></tr><tr><td>docker-compose.yml</td><td>compose核心文件</td></tr><tr><td>nginx.conf</td><td>后台管理系统页面nginx配置文件，修改端口或添加ssl证书，需要修改此文件</td></tr><tr><td>RH-admin-Dockerfile</td><td>后台管理系统镜像Dockerfile文件</td></tr><tr><td>RH-server-Dockerfile</td><td>服务端镜像Dockerfile文件</td></tr></tbody></table><h2 id="需要使用的镜像" tabindex="-1">需要使用的镜像 <a class="header-anchor" href="#需要使用的镜像" aria-label="Permalink to &quot;需要使用的镜像&quot;">​</a></h2><p>mysql:8.0.33<br> redis:7.0.12<br> minio/minio:RELEASE.2023-05-04T21-44-30Z<br> node:16.17.1<br> nginx:1.25.2<br> 可以提前docker pull拉取，也可以在启动的时候自动拉取</p><h2 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># cd到：项目目录/docker</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此处没有添加-d参数，先前台运行，方便查看日志和debug</span></span>
<span class="line"><span style="color:#FFCB6B;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span></span></code></pre></div><h2 id="启动状态查验" tabindex="-1">启动状态查验 <a class="header-anchor" href="#启动状态查验" aria-label="Permalink to &quot;启动状态查验&quot;">​</a></h2><p>docker-compose up后，命令行日志无报错，且看到如下日志<br> [ master ] egg started on <a href="http://127.0.0.1:7001" target="_blank" rel="noreferrer">http://127.0.0.1:7001</a><img src="`+c+'" alt="compose"><br> 则表示已经启动完成</p><h2 id="查看docker状态" tabindex="-1">查看docker状态 <a class="header-anchor" href="#查看docker状态" aria-label="Permalink to &quot;查看docker状态&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span></span></code></pre></div><p>将会看到创建的镜像：docker-right_house_admin、docker-right_house_server</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span></span></code></pre></div><p>输出所有容器，其中name为：right-house-server、right-house-admin、right-house-redis、right-house-mysql、right-house-minio的5个容器正常启动，且状态为UP <img src="'+d+'" alt="compose"><br> 访问你的ip+端口8088，即可访问后台管理系统，默认用户名：admin，默认密码：admin，可以正常登录即为部署成功</p><h2 id="创建oss存储bucket" tabindex="-1">创建OSS存储bucket <a class="header-anchor" href="#创建oss存储bucket" aria-label="Permalink to &quot;创建OSS存储bucket&quot;">​</a></h2><h4 id="通过端口9001访问oss后台管理页面-用户名-right-house-minio-密码-right-house-minio-980128" tabindex="-1">通过端口9001访问OSS后台管理页面，用户名：right_house_minio 密码：right_house_minio_980128 <a class="header-anchor" href="#通过端口9001访问oss后台管理页面-用户名-right-house-minio-密码-right-house-minio-980128" aria-label="Permalink to &quot;通过端口9001访问OSS后台管理页面，用户名：right_house_minio   密码：right_house_minio_980128&quot;">​</a></h4><p><img src="'+e+'" alt="oss"></p><h4 id="登录完成后点击新建bucket" tabindex="-1">登录完成后点击新建bucket <a class="header-anchor" href="#登录完成后点击新建bucket" aria-label="Permalink to &quot;登录完成后点击新建bucket&quot;">​</a></h4><p><img src="'+a+'" alt="oss"></p><h4 id="bucket名称为-filebucket" tabindex="-1">bucket名称为：filebucket <a class="header-anchor" href="#bucket名称为-filebucket" aria-label="Permalink to &quot;bucket名称为：filebucket&quot;">​</a></h4><p><img src="'+t+'" alt="oss"></p><h4 id="完成后点击设置-修改访问权限为public" tabindex="-1">完成后点击设置，修改访问权限为public <a class="header-anchor" href="#完成后点击设置-修改访问权限为public" aria-label="Permalink to &quot;完成后点击设置，修改访问权限为public&quot;">​</a></h4><p><img src="'+o+'" alt="oss"></p>',27),m=[h];function u(b,k,_,g,f,q){return r(),i("div",null,m)}const P=s(p,[["render",u]]);export{x as __pageData,P as default};
