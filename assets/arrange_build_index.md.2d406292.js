import{_ as s,o as a,c as n,O as l}from"./chunks/framework.4afe7240.js";const p="/wx_build.png",e="/wx_ide_uplode.png",o="/wx_admin.png",h=JSON.parse('{"title":"打包部署","description":"","frontmatter":{"title":"打包部署"},"headers":[],"relativePath":"arrange/build/index.md","filePath":"arrange/build/index.md"}'),t={name:"arrange/build/index.md"},c=l(`<p>部署前请确保已经完整阅读过<a href="/develop/options/">配置</a>模块，并且已经将相关配置更改到生产环境地址。</p><h2 id="服务端部署" tabindex="-1">服务端部署 <a class="header-anchor" href="#服务端部署" aria-label="Permalink to &quot;服务端部署&quot;">​</a></h2><p>首先在服务端代码FS-server/app/router.js,打开注释掉的app.model.sync();方法，即可自动创建数据表（数据库是需要手动创建的）。添加参数{ force: true }，即可重置数据库（数据会重置，表会清空。）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 初始化数据库 { force: true }重置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sync</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>框架内置了 egg-cluster 来启动 Master 进程，Master 有足够的稳定性，不再需要使用 pm2 等进程守护模块。<br> 同时，框架也安装了 egg-scripts 来支持线上环境的运行和停止。<br> 这样我们就可以通过 npm start 和 npm stop 命令启动或停止应用。<br> 根据RH-server/config.default.js的配置</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cluster </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">listen</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7001</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>我的后台服务的端口为7001，你可以为7001端口通过nginx进行代理，将域名隐射到对应端口。</p><h2 id="服务端性能监控" tabindex="-1">服务端性能监控 <a class="header-anchor" href="#服务端性能监控" aria-label="Permalink to &quot;服务端性能监控&quot;">​</a></h2><p>推荐使用<a href="https://www.aliyun.com/product/nodejs" target="_blank" rel="noreferrer">阿里云nodejs性能监控平台</a><br> Node.js 性能平台 是面向所有 Node.js 应用提供 性能监控、安全提醒、故障排查、性能优化 等服务的整体性解决方案，提供完善的工具链和服务，协助开发者快速发现和定位线上问题。<br> 安装依赖</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">egg-alinode</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span></code></pre></div><p>开启插件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// config/plugin.js</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">alinode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">package</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">egg-alinode</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>配置：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// config/config.default.js</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">alinode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 从 \`Node.js 性能平台\` 获取对应的接入参数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;YOUR_APPID&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">secret</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;YOUR_SECRET&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="部署后台管理系统" tabindex="-1">部署后台管理系统 <a class="header-anchor" href="#部署后台管理系统" aria-label="Permalink to &quot;部署后台管理系统&quot;">​</a></h2><p>打包项目，得到dist文件夹</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><p>将dist上传至服务器路径下，路径你可以自定义，本次我们放在/opt/RH-admin目录下。<br> 修改服务器配置,通过端口9527访问。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#编辑/etc/nginx/sites-available/default</span></span>
<span class="line"><span style="color:#FFCB6B;">vi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/nginx/sites-available/default</span></span></code></pre></div><p>新建一个server，监听9527端口。try_files配置很重要，解决SPA应用刷新就会404的问题。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">  listen 9527;</span></span>
<span class="line"><span style="color:#A6ACCD;">  root /opt/RH-admin;</span></span>
<span class="line"><span style="color:#A6ACCD;">  index index.html index.htm index.nginx-debian.html;</span></span>
<span class="line"><span style="color:#A6ACCD;">  location / {</span></span>
<span class="line"><span style="color:#A6ACCD;">    try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>现在已经可以通过ip+端口的形式访问后台管理系统，将域名映射到这个端口，即可通过域名访问。</p><h2 id="客户端打包" tabindex="-1">客户端打包 <a class="header-anchor" href="#客户端打包" aria-label="Permalink to &quot;客户端打包&quot;">​</a></h2><p>两个客户端小程序都是基于uniapp，且目前只发布到微信小程序，所以部署的方式是一样的。<br> 打开hbuilder，打包项目： <img src="`+p+'" alt="img"></p><p>打包完成后，在微信开发者工具内上传到微信的服务器。 <img src="'+e+'" alt="img"></p><p>在<a href="https://mp.weixin.qq.com/" target="_blank" rel="noreferrer">微信公众平台</a>=&gt;版本管理内提审。 <img src="'+o+'" alt="img"> 微信限制http访问地址必须为https，且必须将域名白名单配置到微信公众平台。<br> 首次提审为了保证通过率，需要尽可能的完善提审表单，尽可能详细的截图，告知操作明细。</p>',26),r=[c];function i(y,D,C,F,d,A){return a(),n("div",null,r)}const u=s(t,[["render",i]]);export{h as __pageData,u as default};
