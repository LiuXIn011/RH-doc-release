import{_ as e,o as a,c as s,V as r}from"./chunks/framework.d32248c8.js";const f=JSON.parse('{"title":"服务端","description":"","frontmatter":{"title":"服务端"},"headers":[],"relativePath":"overview/technologyStack/service.md"}'),t={name:"overview/technologyStack/service.md"},o=r(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>服务端使用<a href="https://www.eggjs.org/" target="_blank" rel="noreferrer">Egg</a>构建，Egg 继承于 <a href="https://github.com/koajs/koa" target="_blank" rel="noreferrer">Koa</a>；Egg规范了nodejs开发，使用MVC开发模式，奉行『约定优于配置』，团队协作成本低。使得nodejs代码结构不再千奇百怪。</p><p><img src="https://zos.alipayobjects.com/rmsportal/JFKAMfmPehWfhBPdCjrw.svg" alt="koa"></p><p><a href="https://github.com/search?q=topic%3Aegg-plugin&amp;type=Repositories" target="_blank" rel="noreferrer">Egg社区</a> 还算完备，一些常用的插件都包含在内。由于继承了Koa的原因，在社区插件方面也完美继承，不过在插件使用方面，Egg的效率要高于Koa。</p><p>以下介绍部分核心组件的使用方式，其他常用egg插件较为简单，不一一介绍。</p><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h2><p>使用<a href="https://github.com/eggjs/egg-sequelize" target="_blank" rel="noreferrer">egg-sequelize</a>管理Mysql数据库</p><p><img src="https://www.sequelize.cn/assets/images/logo-small-844fb9182c0fbf41931de2246fa9c496.png" alt="sequelize"></p><p><a href="https://sequelize.org/" target="_blank" rel="noreferrer">Sequelize</a>是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, MariaDB, SQLite 以及 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 预读和延迟加载,读取复制等功能。<br> egg-sequelize是对Sequelize的二次继承，约定egg插件风格来使用sequelize。由于版本迭代的问题，egg-sequelize的使用和原版存在一定的差异，例如在自动生成model的功能上，两个插件有截然不同的结果，而且是各有所缺。所以在此建议：不要使用自动生成model的方法，采用手工编写model，然后自动生成数据表的方式。<br> 在手工编写好model后，在服务端代码FS-server/app/router.js,打开注释掉的app.model.sync();方法，即可自动创建数据表。添加参数{ force: true }，即可重置数据库（数据会重置，表会清空。）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 初始化数据库 { force: true }重置</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sync</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="对象存储oss" tabindex="-1">对象存储OSS <a class="header-anchor" href="#对象存储oss" aria-label="Permalink to &quot;对象存储OSS&quot;">​</a></h2><p>使用<a href="https://www.minio.org.cn/" target="_blank" rel="noreferrer">MinlO</a>来管理文件存储。</p><p><img src="https://www.minio.org.cn/resources/img/logo.svg" alt="MinlO"></p><p>MinlO是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据。例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等,而一个对象文件可以是任意大小,从几kb到最大5T不等。MinlO是一个非常轻量的服务 可以很简单的和其他应用的结合。<br> MinlO部署比较简单，当然你也可以购买商业的云服务OSS来使用，但是作者崇尚自己动手丰衣足食（穷）。</p><h2 id="缓存redis" tabindex="-1">缓存redis <a class="header-anchor" href="#缓存redis" aria-label="Permalink to &quot;缓存redis&quot;">​</a></h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F9821be0d-e714-4f98-a350-d7bd98a8659a%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&amp;refer=http%3A%2F%2Fsafe-img.xhscdn.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1686810765&amp;t=9b772f5438a26de7b9764397588a6ecb" alt="redis"><a href="https://redis.io/" target="_blank" rel="noreferrer">redis</a>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br> egg使用redis可以使用<a href="https://github.com/eggjs/egg-redis" target="_blank" rel="noreferrer">egg-redis</a><br> 将小程序开放平台的token和用户体系生成的token保存在redis中是一个很好的选择，</p>`,16),l=[o];function n(p,i,c,g,h,d){return a(),s("div",null,l)}const u=e(t,[["render",n]]);export{f as __pageData,u as default};
